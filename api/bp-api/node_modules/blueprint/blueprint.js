/**
    (c) Copyright 2014 Hewlett-Packard Development Company, L.P.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
var blueprint_utils = {
  get_all: function(err, bps){
    Bp.find().exec(function(err_, bps_){
      if(err_){
        err(err_);
      }else{
        bps(bps_);
      }
    });
  },
  get_blueprint: function(id, err, blueprint){
    Bp.findOne({ id: id }, function(err_, bp) {
      if (err_){
        err(err_);
      }else{
        blueprint(bp);
      }
    });
  },
  get_blueprint_part_where: function(id, model, query, err, result){
    Bp.findOne().where({ id: id }).where(query).exec(function(err_, res_) {
      if(err_){
        err("Conflict on where. Error: "+err_);
      }else{
        if(res_ === undefined){
          result(undefined);
        }else{
          result(res_[model]);
        }
      }
    });
  },
  create_blueprint: function(shortname, instance_id, tools, defect_tracker, auth, users, projects, documentation, maestro_url, blueprint_name, err, result){
    Bp.create({
      shortname: shortname,
      id: instance_id,
      tools: tools,
      defect_tracker: defect_tracker,
      auth: auth,
      users: users,
      projects: projects,
      documentation: documentation,
      maestro_url: maestro_url,
      blueprint_name: blueprint_name
    }).done(function(err_, bp) {
      // Error handling
      if (err_) {
        err(err_);
      // The Blueprint was created successfully!
      }else {
        //Blueprint created
        result(bp);
      }
    });
  },
  get_kit_blueprint: function(err, blueprint){
    var config =  require('config/config').get_config_data();
    if(config  instanceof Error){
      err('Error reading the configuration file.');
    }else{
      blueprint_utils.get_blueprint(JSON.parse(config).site.id, function(errbp){
        if(errbp){
          err(errbp);
        }
      }, function(bp){
        if(bp === undefined){
          //If the blueprint does not exist in our model that means we haven't created the record in our model
          //TODO: a few things are not defined
          var config_module = require('config_module/config_module');
          var tools = config_module.get_tools(config);
          config = JSON.parse(config);
          blueprint_utils.create_blueprint(config.site.shortname, config.site.id, tools, config.site.defect_tracker, config.site.auth, config.site.users, config.site.projects, config.site.documentation, config.site.maestro_url, config.site.blueprint, function(errc){
            err(errc);
          }, function(bpc){
            blueprint(bpc);
          });
        }else{
          blueprint(bp);
        }
      });
    }
  },
  get_kit_blueprint_sync: function(err, blueprint){
    var config =  require('config/config').get_config_data();
    if(config  instanceof Error){
      err('Error reading the configuration file.');
    }else{
      blueprint_utils.get_blueprint(JSON.parse(config).site.id, function(errbp){
        if(errbp){
          err(errbp);
        }
      }, function(bp){
        if(bp === undefined){
          //If the blueprint does not exist in our model that means we haven't created the record in our model
          //TODO: a few things are not defined
          var config_module = require('config_module/config_module');
          var tools = config_module.get_tools(config);
          config = JSON.parse(config);
          blueprint_utils.create_blueprint(config.site.shortname, config.site.id, tools, config.site.defect_tracker, config.site.auth, config.site.users, config.site.projects, config.site.documentation, config.site.maestro_url, config.site.blueprint, function(errc){
            err(errc);
          }, function(bpc){
            blueprint(bpc);
          });
        }else{
          bp.destroy(function(errd){
            if(errd){
              //We suppress the error and look for the old blueprint record
              blueprint_utils.get_blueprint(JSON.parse(config).site.id, function(errds){
                err(errds)
              }, function(bpds){
                blueprint(bpds)
              });
            }else{
              var config_module = require('config_module/config_module');
              var tools = config_module.get_tools(config);
              config = JSON.parse(config);
              blueprint_utils.create_blueprint(config.site.shortname, config.site.id, tools, config.site.defect_tracker, config.site.auth, config.site.users, config.site.projects, config.site.documentation, config.site.maestro_url, config.site.blueprint, function(errc){
                err(errc);
              }, function(bpc){
                blueprint(bpc);
              });
            }
          });
        }
      });
    }
  }
}

module.exports = blueprint_utils;