var config_yaml = require('config-yaml/config-yaml').get_config_yaml();
var http = require('http');
module.exports = {
  get_opt: function(opt, callback){
    var url = config_yaml.runtime.protocol + '://' + config_yaml.runtime.ip + ':' + config_yaml.runtime.port+ config_yaml.runtime.resource_uri + 'option/' + opt;
    var reqGet = http.get(url, function(res) {
      res.on('data', function (chunk) {
        chunk = JSON.parse(chunk)[0];
        callback(null, chunk);
      });
      
      res.on('error', function(e){
        console.log('Error get_opt:'+e.message);
        callback('Error get_blueprint_id:'+e.message, null);
      });
    });
    
    reqGet.end();
    reqGet.on('error', function (e) {
      console.log('Error closing the request get_opt:'+e.message);
      callback('Error closing the request get_opt:'+e.message, null);
    });
  },
  create_kit_admin: function(email, callback){
    post_options = {
            host: config_yaml.runtime.ip,
            port: config_yaml.runtime.port,
            path: config_yaml.runtime.resource_uri + 'option/kit_admin/'+email,
            method: 'POST',
            rejectUnauthorized: false,
            requestCert: true,
            agent: false,
            headers: {
              'accept': 'application/json',
              'content-type': 'application/json'
            }
        };
      var payload = { optname: 'kit_admin', optvalue: email };
    
      var post_req = http.request(post_options, function(res) {
          res.setEncoding('utf8');
          res.on('data', function (chunk) {
            chunk = JSON.parse(chunk);
            if(chunk.affectedRows == 1){
              callback(null, true);
            }else{
              callback(null, false);
            }
          });
      });
      
      post_req.on('error', function (e) {
          console.log('Kit Registration API Error: ' + e.message);
          callback(e.message, null);
      });
      
      post_req.write(JSON.stringify(payload));
      post_req.end();
  },
  is_admin: function(email, callback){
    var url = config_yaml.runtime.protocol + '://' + config_yaml.runtime.ip + ':' + config_yaml.runtime.port+ config_yaml.runtime.resource_uri + 'option/kit_admin';
    var reqGet = http.get(url, function(res) {
      res.on('data', function (chunk) {
        var admin_found = false;
        JSON.parse(chunk).forEach(function(admin){
          if(admin.option_value === email){
            admin_found = true;
          }
        });
        callback(null, admin_found);
      });
      
      res.on('error', function(e){
        console.log('Error is_admin:'+e.message);
        callback('Error is_admin:'+e.message, null);
      });
    });
    
    reqGet.end();
    reqGet.on('error', function (e) {
      console.log('Error closing the request is_admin:'+e.message);
      callback('Error closing the request is_admin:'+e.message, null);
    });
  },
  kit_has_admin: function(callback){
    var url = config_yaml.runtime.protocol + '://' + config_yaml.runtime.ip + ':' + config_yaml.runtime.port+ config_yaml.runtime.resource_uri + 'option/kit_admin';
    var reqGet = http.get(url, function(res) {
      res.on('data', function (chunk) {
        if(res.statusCode === 404){
          callback(null, false);
        }else if(res.statusCode === 200){
          chunk = JSON.parse(chunk);
          if(chunk.length > 0){
            callback(null, true);
          }else{
            callback(null, false);
          }
        }else{
          callback(null, false);
        }
      });
      
      res.on('error', function(e){
        console.log('Error kit_has_admin:'+e.message);
        callback('Error kit_has_admin:'+e.message, null);
      });
    });
    
    reqGet.end();
    reqGet.on('error', function (e) {
      console.log('Error closing the request kit_has_admin:'+e.message);
      callback('Error closing the request kit_has_admin:'+e.message, null);
    });
  }
}