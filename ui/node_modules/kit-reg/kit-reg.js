/**
 * Kit registration 'util' module
 */

var url = require('url');
var http = require('http');
var async = require('async');
//var config_yaml = require('config-yaml/config-yaml').get_config_yaml();
var blueprint_utils = require('blueprint/blueprint');

module.exports = {


  is_registered: function(err, result){
    var get_options = {};
      getInstanceId(function(inst_err){
        err(inst_err);
      }, function(inst_res){
        //If the system has a proxy we use it
        var instance_id = JSON.parse(inst_res).id
        if(process.env.http_proxy === undefined){
          get_options = {
              host: sails.config.env.kit.registration.ip,
              port: sails.config.env.kit.registration.port,
              path: sails.config.env.kit.registration.resource_uri + 'is_registered/'+instance_id,
              method: 'GET',
              rejectUnauthorized: false,
              requestCert: true,
              agent: false,
              headers: {
                'accept': 'application/json'
              }
          };
        }else{
          var url_get = sails.config.env.kit.registration.protocol +'://'+ sails.config.env.kit.registration.ip + ':'+ sails.config.env.kit.registration.port +''+ sails.config.env.kit.registration.resource_uri + 'is_registered/'+instance_id;
          var proxy_url = url.parse(process.env.http_proxy);
          get_options = {
              host: proxy_url.hostname,
              port: proxy_url.port,
              path: url_get,
              method: 'GET',
              rejectUnauthorized: false,
              requestCert: true,
              agent: false,
              headers: {
                'accept': 'application/json'
              }
          };
        }
        
        var get_req = http.request(get_options, function(res) {
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                result(JSON.parse(chunk));
            });
        });
        
        get_req.on('socket', function (socket) {
          socket.setTimeout(5000);
          socket.on('timeout', function() {
              get_req.abort();
          });
        });
        
        get_req.on('error', function (e) {
            if (e.code === "ECONNRESET") {
                console.log('Kit Registration API Error: '+e.message);
                err("We can't validate if you are registered right now, please try again later");
                //specific error treatment
            }else{
              console.log('Kit Registration API Error: ' + e.message);
              err(e);
            }
        });
        
        get_req.end();
      })
  },
  do_register: function(name, email, err, result){
    genJSON(name, email, function(errors){
      err(errors);
    }, function(results){
      var post_options = {};
      //If the system has a proxy we use it
      if(process.env.http_proxy === undefined){
        post_options = {
            host: sails.config.env.kit.registration.ip,
            port: sails.config.env.kit.registration.port,
            path: sails.config.env.kit.registration.resource_uri + 'register',
            method: 'POST',
            rejectUnauthorized: false,
            requestCert: true,
            agent: false,
            headers: {
              'accept': 'application/json',
              'content-type': 'application/json'
            }
        };
      }else{
        var url_post = sails.config.env.kit.registration.protocol +'://'+ sails.config.env.kit.registration.ip + ':'+ sails.config.env.kit.registration.port +''+ sails.config.env.kit.registration.resource_uri + 'register';
        var proxy_url = url.parse(process.env.http_proxy);
        post_options = {
            host: proxy_url.hostname,
            port: proxy_url.port,
            path: url_post,
            method: 'POST',
            rejectUnauthorized: false,
            requestCert: true,
            agent: false,
            headers: {
              'accept': 'application/json',
              'content-type': 'application/json'
            }
        };
      }
      
      var post_req = http.request(post_options, function(res) {
          res.setEncoding('utf8');
          res.on('data', function (chunk) {
              result(JSON.parse(chunk));
          });
      });
      
      post_req.on('error', function (e) {
          console.log('Kit Registration API Error: ' + e.message);
          err(e);
      });
      
      post_req.write(JSON.stringify(results));
      post_req.end();
    })
  }
}
function genJSON(name, email, err, res){
  async.series({
    InstanceId: function(callback){
      getInstanceId(function(err_instance){
        console.log('Failed to parse the instance id of the kit for the registration process.');
        callback(err_instance);
      }, function(res_instance){
        callback(null, JSON.parse(res_instance).id);
      })
    },
    Nodes: function(callback){
      genJSONNodes(function(err_node){
        console.log('Failed to parse the nodes of the kit for the registration process.');
        callback(err_node);
      }, function(result_node){
        callback(null, result_node);
      });
    }
  }, function(async_err, async_res){
    if(async_err){
      err(async_err);
    }else{
      var json = { 'Devkit': { 'Owner': { 'Name': name, 'Email': email }, 'InstanceId': async_res.InstanceId, 'Nodes': async_res.Nodes } }
      res(json)
    }
  })
}
function getInstanceId(err, res){
  blueprint_utils.get_blueprint_id(function(err_id){
    err(err_id);
  }, function(get_id){
    res(get_id)
  });
}
function genJSONNodes(err, result){
  blueprint_utils.get_current_raw_bp(function(err_raw){
    err_raw(err);
  }, function(raw_bp){
    res_tools = JSON.parse(raw_bp).site
    var tools = [];
    res_tools['node'].forEach(function(node){
      async.series({
        Ip_Address: function(callback){
          getIP(node.tools, function(ip){
            callback(null, ip);
          })
        },
        Tools: function(callback){
          getNodeTools(node.tools, function(node_tools){
            callback(null, node_tools);
          })
        }
      }, function(async_err, async_res){
        if(async_err){
          err(async_err);
        }else{
          var item = { 'Node': { 'Ip_Address': async_res.Ip_Address, 'Node_Name': node['node_name'], 'Tools': async_res.Tools } }
          tools.push(item);
        }

      })
    })
    result(tools);
  })
}
function getIP(tool_socket, res){
  var ip = 'N/A';
  tool_socket.forEach(function(tool){
    if(tool.settings_url !== undefined && tool.settings_url !== '#'){
      var uri_settings = url.parse(tool.settings_url);
      ip = uri_settings.hostname;
    }
    if(tool.tool_url !== undefined && tool.tool_url !== '#'){
      var uri_tool = url.parse(tool.tool_url);
      ip = uri_tool.hostname;
    }
  });
  res(ip);
}
function getNodeTools(tools, res){
  var tool_arr = [];
  tools.forEach(function(tool){
    tool_arr.push(tool.name);
  })
  res(tool_arr);
}